//    1. 접근제한자의 접근 가능 범위가 넓은 것부터 차례대로 기술하시오 
//    public -> protected -> default -> private
//    정답: ( public ) > ( protected ) > ( default ) > ( private )

//    2. 접근제한자(Access modifier) 각각의 접근 가능범위를 간략하게 기술하시오.
//    public (동일 클래스, 동일 패키지, 자식 클래스, 전체)
//    protected (동일 클래스, 동일 패키지, 자식 클래스)
//    default (동일 클래스, 동일 패키지)
//    private (동일 클래스)
//    정답 : ① public ( 패키지 밖에서 import 하여 사용 가능 )
//          ② protected ( 비상속시 패키지 안, 상속시 패키지 밖 상속받은 후손클래스 안 )
//          ③ default ( 패키지 안 )
//          ④ private ( 클래스 안 )


//    3. 메소드 오버로딩(Overloading)에 대한 설명으로 해당되지 않는 것은?
//    4번 접근제한자는 달라도 된다.
//    정답 : ② 반환자료형은 달라도 된다.
//          ④ 접근제한자는 달라도 된다.


//    4. 클래스에 상수 필드 NUM 을 선언하고 초기값 100 으로 초기화하는 구문을 작성하시오
//    public class aa {public final int NUM = 100;}
//    정답 : public static final int NUM = 100;

//    5. 클래스가 가진 인스턴스 변수가 메모리에 할당될 때의 초기화 순서를 맞게 나열하시오.

//    정답 : ① JVM 이 정한 기본값
//          ④ 명시적 초기값
//          ② 초기화 블럭
//          ③ 매개변수 있는 생성자

//    6. 기본자료형 1차원 배열의 특징으로 틀린 것은?
//    3. 정적 메모리 영역에 배열을 할당할 수 있다.
//    정답 : ③ 정적 메모리 영역에 배열을 할당할 수 있다

//    7. 객체 배열에 대한 설명으로 옳은 것은?
//    1. 객체 배열은 기본자료형 2차원배열과 유사한 레퍼런스 배열이다.
//    정답 : ① 객체 배열은 기본자료형 2차원배열과 유사한 레퍼런스 배열이다.

//    8. 변수의 생성 시기와 소멸 시기를 기술하시오
//    지역변수 :
//    인스턴스 변수 :
//    정적변수 : 프로그램 시작 시, 프로그램 종료 시
//    정답 : 지역변수(Local Variable) ( 메소드 실행시 ) ( 메소드 종료시 )
//          인스턴스변수(Field) ( 객체 생성시 ) ( 가비지 콜렉터 구동시 )
//          정적변수(static field) ( 프로그램 실행시 ) ( 프로그램 종료시 )


//    9. this 레퍼런스의 설명으로 틀린 것은?
//    3. 정적 메소드에서도 사용할 수 있다.
//    정답 : ③ 정적 메소드에서도 사용할 수 있다.

//    10. 아래 소스 코드의 컴파일 및 실행 결과값은?
//    2
//    정답 : 2

//    11. 다음에서 설명하고 있는 내용을 쓰시오.
//    메서드
//    정답 : 메소드(method)

//    12. 다음 코드에서 temp 변수의 최종값은?
//    1
//    정답: 1

//    13. 다음 중 식별자(idectifier)로 사용 가능한 것을 모두 고르시오.
//    Fred2, My$Tom
//    정답 : _public, Fred2, My$Tom, 나이

//    14. 아래 소스 코드의 컴파일 및 실행 결과는?
//    4
//    정답 : 4

//    15. 아래 소스 코드의 컴파일 및 실행 결과는?
//    8
//    정답 : 8

//    16. 아래 소스 코드의 컴파일 및 실행 결과는?
//    true
//    false
//    false
//    false
//    false
//    정답: True, T, False, F, T

//    17. OOP 의 4 대 특징은 ?
//    추상화, 캡슐화, 상속, 다형성
//    정답 : OOP 의 4 대 특징은 ( 추상화(Abstraction) ), ( 캡슐화(Encapsulation) ), ( 상속
//          (Inheritance) ), ( 다형성(Polymorphism) ) 이다.

//    18. 아래 소스 코드의 컴파일 및 실행 결과는?
//    2
//    정답 : 2

//    19. 자바 소스 코드 컴파일시 명시(직접)적으로 코딩하지 않을 경우 컴파일러에 의해 자동
//        생성되는 코드를 3 개이상 적으시오.

//    정답 : ( import java.lang.*; )
//          ( default constructor , 자동 upcasting, this, super(); )
//          ( return; toString() )

//    20. JVM 에 의해 관리되는 메모리는 크게 3 가지 영역으로 분류되어 관리된다. 프로그램
//        실행시 클래스가 로드(load)되는 ( static(method) ) 영역, 지역변수(local variable)가
//        할당되는 ( stack ) 영역, 인스턴스(instance == 객체)가 할당되는
//        ( heap(자유메모리) ) 영역이다. 이중 생명주기가 가장 짧은 영역은 (stack ) 이고,
//        가장 긴 영역은 ( static ) 이다.